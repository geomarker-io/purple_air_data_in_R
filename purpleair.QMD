---
title: "PurpleAir Data Exploration Vignette"
subtitle: "RISE Presentation"
author: "Stephen Colegate"
date: "July 31, 2023"
format:
  html:
    output-file: "index.html"
    embed-resources: true
toc: true
toc-expand: true
toc-title: Contents
editor: visual
bibliography: purpleair.bib
number-sections: true
number-depth: 3
---

# Introduction {#sec-intro}

Air quality sensors have the potential to provide high spatial and temporal resolution data and their accessibility in terms of cost and ease of use [@collier-oxandale2022]. Open access to environmental data sets and related tools is possible through a stable and consistent Application Programming Interface (API) that allows software and application developers to build applications to display and report that data in transparent and meaningful ways [@feenstra2020].

In this document, we will present methods of accessing synoptic and time series data using R software with the `AirSensor` package from the PurpleAir API dashboard interface [@AirSensor]. We will then explore how to visualize both the spatial (in the form of maps) and temporal (in the form of time series plots) to determine air pollution trends.

::: callout-note
This rendered HTML of all the code and relevant output is hosted online on our [GitHub page](https://github.com/geomarker-io/purple_air_data_in_R/). All the R code in this vignette is contained in the `purpleair.R` file there. Instructions are provided in @sec-download to download this file directly from GitHub. As you follow along with this tutorial, try running all the available R code in the `purpleair.R` file to learn how to read in your PurpleAir data and do some basic data analysis with it.
:::

## Setup {#sec-setup}

Throughout this tutorial, we assume that you already have R and RStudio installed on your computer and know the basics with how to use the R programming language. You can install R on your computer by going to <https://cran.r-project.org/> and selecting the R version that is appropriate for your operating system [@rcoreteam2013]. After installing R, you will then need to install [RStudio Desktop](https://posit.co/download/rstudio-desktop/) - an integrated development environment (IDE) to help data scientists be more productive with R [@rstudioteam2020a].

This section describes how to set up your R session to prepare to work with the necessary packages, functions, and files that will be created, loaded and saved to your computer.

::: callout-important
It is highly recommended that you are somewhat familiar with using R and RStudio before continuing on with this vignette. If you want to learn more about the basics of R and RStudio, the [R tutorial vignette](https://colegasn.github.io/Rintro/) walks through everything you need to know before you begin.
:::

### New R Project {#sec-rproject}

First open RStudio on your computer. At the top left, click **File** \> **New Project**. A dialogue box should appear like the one shown below:

![Create a new R project within RStudio.](Rproject1.png){fig-align="center" width="400"}

::: callout-tip
If you already have the folder created where all project files will be kept, you can reference this folder by selecting **Existing Directory**. This loads a navigation box where you can select your folder.

![Select a folder that already exists to house the R project.](Rproject4.png){fig-align="center" width="400"}
:::

Select New Directory from the message box. This brings up a list of various project types. Select **New Project**.

![Click **New Project** to create a new R project.](Rproject2.png){fig-align="center" width="400"}

On the next screen (shown below), enter in the name of the project (e.g. PurpleAir). Beneath the directory name, browse the location on your computer where to host the R project. This will create a subdirectory folder with the name of the project inside. All files created, saved, and loaded throughout this vignette will come from this folder.

![Type in the project name and select where to create the folder for the project.](Rproject3.png){fig-align="center" width="400"}

Leave all the other fields untouched. Click **Create Project** to start the new R project. RStudio then restarts the current R session inside of the project folder.

::: callout-tip
You can verify the R project you are currently in by looking for the project name in the top-right corner of RStudio. Clicking on this icon brings up a menu to create new R projects, close the existing project, or switch to a new project.
:::

### Download Files {#sec-download}

After creating a new R project, download the necessary R files from our [GitHub page](https://github.com/geomarker-io/purple_air_data_in_R/tree/main). First, download the `purpleair.R` file. Copy and paste the following line of code below into the console. To copy this code block, look for the clipboard icon located in the top-right corner of the code block and click Copy to Clipboard.

```{r purpleair.R}
download.file("https://raw.githubusercontent.com/geomarker-io/purple_air_data_in_R/main/purpleair.R", destfile = "purpleair.R")
```

Inside RStudio, in the Console Pane, paste this code at the command prompt `>` and press **ENTER**. R should then go to our GitHub page, look for the `purpleair.R` file, and download the file into your R project folder. Verify the file has been downloaded by clicking on the **Files** tab in the Output Pane. Click on the `purpleair.R` file link inside the Files tab to open the R file inside RStudio. The `purpleair.R` file should now be included in the Source Pane.

At the top of the R script, you should see code that downloads the `new_pas.R` and `new_pat.R` files from our [GitHub page](https://github.com/geomarker-io/purple_air_data_in_R/tree/main):

```{r new_pas.R}
# Download 'new_pas.R' file from GitHub
download.file("https://raw.githubusercontent.com/geomarker-io/purple_air_data_in_R/main/new_pas.R", destfile = "new_pas.R")
```

Running this code should download the `new_pas.R` file into your R project folder. Similarly, running the following code should download the `new_pat.R` file into your R project folder. Download each of these files one at a time to ensure they are saved properly to the folder.

```{r new_pat.R}
# Download 'new_pat.R' file from GitHub
download.file("https://raw.githubusercontent.com/geomarker-io/purple_air_data_in_R/main/new_pat.R", destfile = "new_pat.R")
```

### R Packages {#sec-packages}

You will need to install the following packages in an R session in order to use the following code in this vignette:

-   [`dplyr`](https://cran.r-project.org/web/packages/dplyr/dplyr.pdf): a fast, consistent tool for working with data [@dplyr].

-   [`ggplot2`](https://cran.r-project.org/web/packages/ggplot2/ggplot2.pdf): a system for creating graphics [@ggplot2].

-   [`devtools`](https://www.r-project.org/nosvn/pandoc/devtools.html): a package that allows experienced R users to create and deploy R packages of their own [@devtools-2].

-   [`MazamaCoreUtils`](https://cran.r-project.org/web/packages/MazamaCoreUtils/MazamaCoreUtils.pdf): a suite of utility functions for working with AirSensor package [@MazamaCoreUtils].

-   [`AirSensor2`](https://github.com/MazamaScience/AirSensor2): package for processing and displaying data from PurpleAir based on the [AirSensor](https://mazamascience.github.io/AirSensor/) package [@AirSensor-2].

::: callout-caution
Packages need to only be installed one time. After a package has been installed, there is no reason to install the package again unless there is an updated version for it.
:::

To install `dplyr`, `ggplot2`, and `devtools`, use the `install.packages()` function below.

```{r install_packages}
#| eval: false
# Install the following packages - only need to run once
install.packages(c('dplyr', 'ggplot2', 'devtools'))
```

::: callout-caution
You may need to restart the R session in order for these packages to successfully install. If this is the case, select **Yes** when prompted to restart the R session. You may have to rerun the R code chunks again after restarting the session.
:::

::: callout-tip
R already comes with its own packages (e.g., datasets, graphics, etc.). You do not need to install these packages, as they are already preinstalled when R is first installed. You can view all the R packages installed on your computer by clicking on the **Packages** tab in RStudio on the Output Pane.
:::

Next install the `MazamaCoreUtils` package:

```{r MazamaCoreUtils}
#| eval: false
# Install the 'MazamaCoreUtils' package - only need to run once
install.packages('MazamaCoreUtils')
```

::: callout-caution
Some R packages (like `MazamaCoreUtils`) depend on other R packages in order to function properly. These extra dependencies will be installed automatically if they are not present in the users library.
:::

Unlike the other R packages above, the `AirSensor2` package is not publicly available on [CRAN](https://cran.r-project.org/) (as of this writing). However, the files needed to install the package can be downloaded from [GitHub](https://github.com/MazamaScience/AirSensor2). To do this, we use the `install_github()` function from the `devtools` package to point to the GitHub page:

```{r install_AirSensor}
#| eval: false
# Install the 'AirSensor2' package - only need to run once
devtools::install_github('mazamascience/AirSensor2')
```

When the above line is executed, a list of dependencies the `AirSensor2` package needs will be listed, and you will be asked to updated some or all of the packages. At the prompt, type `1` and press **ENTER** to update all the dependencies automatically.

![When prompted with a list of packages to update, type `1` and press **ENTER**.](AirSensor2.png){fig-align="center" width="400"}

::: callout-note
It can take several minutes for all the packages to download and install on your computer. Do not run any code or stop the process by clicking on the stop sign icon in the top right of the Console Pane. Doing so can cause problems with the installation.
:::

Once all the packages have been installed, you must then load each package into the R environment by using the function `library()`:

```{r load_packages}
#| message: false
#| warning: false
# Load required R packages
library(dplyr)
library(ggplot2)
library(AirSensor2)
```

::: callout-tip
A package only needs to be loaded in once per R session. Reloading a package will have no effect. You can check whether a package is successfully loaded by clicking on the **Packages** tab in the Output Pane. You can also load a package by selecting the open box next to the package name, browse package information on CRAN, and delete the package altogether from this list.

![List of Packages installed in the Output Pane. Loaded packages are indicated with a checkmark.](packages.png){fig-align="center" width="450"}

Loading and unloading packages can be accomplished here by clicking on the check mark box.
:::

::: callout-warning
All open packages are unloaded when RStudio is closed or a new R session begins. Unlike the installation process where the packages are installed only once, you must load these packages every time you start a new R session. When you quit your R session and start a fresh session, you must reload the R packages again.
:::

::: callout-caution
Sometimes, R will print a warning message if a package that is loaded could conflict with another package that is already loaded, like the one shown below:

![Function conflicts when loading the `dplyr` package.](conflict.png){fig-align="center" width="450"}

This scenario appears if, for example, functions that share the same name but perform different actions from two or more packages. Functions from the latter package will mask functions that are included in packages loaded earlier by default.
:::

# Synoptic (PAS) Data {#sec-synoptic}

**Synoptic data** provides a synopsis - a comprehensive view of something at a moment in time. Synoptic data takes a snapshot of data from all the PurpleAir sensors at a moment in time and uploads them to the cloud. **Spatial data** utilizes synoptic data to visualize data in different spacial locations (such as across the United States) at a given moment. Spatial data from PurpleAir sensors are stored on the cloud as **PurpleAir Synoptic (PAS)** data.

This vignette demonstrates an example workflow for exploring air quality synoptic data using the AirSensor R package and data captured by the PurpleAir air quality sensors [@callahan_pas_2023]. Spatial data from PurpleAir will be downloaded from the PurpleAir API dashboard. We will then explore the spatial data by creating maps of air quality and temperature information.

## Create PAS from PurpleAir {#sec-live}

You can create a PAS object using the latest available PurpleAir sensor data from the PurpleAir website within your R environment. This method requires the user to create an account with PurpleAir and obtain an **Application Programming Interface (API)** key unique to the user to make specific queries.

The [**PurpleAir API dashboard**](https://develop.purpleair.com/home) allows users to create and manage their API keys and their usage. The dashboard requires a [Gmail](https://support.google.com/mail/answer/56256?hl=en) or [Google-associated](https://support.google.com/accounts/answer/27441?hl=en) account to sign in. The instructions below follow the [tutorial](https://community.purpleair.com/t/new-api-online-dashboard/3981) provided by PurpleAir.

### Create Project {#sec-createProject}

![The PurpleAir API dashboard for creating projects.](purpleair_projects.png){fig-align="center"}

First create a project by following these steps:

1.  Sign in to [develop.purpleair.com](https://develop.purpleair.com/home) using a Gmail or Google-associated account.

2.  Click **Projects** on the left-hand side of the page.

3.  Click on **Add** in the top right-hand corner of the page.

    ![Creating a project in the PurpleAir API dashboard.](purpleair_addproject.png){fig-align="center" width="550"}

4.  Enter in a project name.

5.  You must allocate points to your new project. New users begin with 1 million free points that they can allocate to any project. When an API query is executed in R, points will be deducted from this allocation based on the type of data being requested. Additional points may be purchased on the PurpleAir website. More information about how points are allocated and used can be found [here](https://community.purpleair.com/t/api-pricing/4523).

6.  Click **Add**.

Once a project has been created, you can then create an API key for that project.

### Obtain API Key {#sec-createAPI}

![List of active API Keys on the PurpleAir dashboard.](purpleair_apikey.png){fig-align="center"}

To obtain your unique API key follow these steps:

1.  Sign in to [develop.purpleair.com](https://develop.purpleair.com/home) using a Gmail or Google-associated account.

2.  Click **API Keys** on the left-hand side of the page.

3.  Click on **Add** in the top right-hand corner of the page.

    ![](purpleair_createkey.png){width="450"}

4.  You should see the auto-populated project name you created earlier (@sec-createProject). You can have several projects and API keys. Select the appropriate project if you have multiple projects.

5.  Select **Read** under "Type", select **Enabled** under "Status" , and leave all the other fields blank.

6.  Click **Add**.

You should then see your unique API key for the project. You can modify the allocation of points and examine the usage of the API key and its allocated points at any time.

![The unique PurpleAir API Key associated with your project.](purpleair_api.png){fig-align="center" width="800"}

::: callout-warning
API keys are issued per user, not per sensor. Make sure that you have allocated points to the project associated with the API key before continuing on.
:::

### Set API Key {#sec-setAPI}

The API Key is an access token that allows you to pull PurpleAir sensor data from the cloud into your R session environment (see @sec-createAPI to learn how to create API Keys). It is not ideal to leave your API Key in a R script. If you share any of these documents that include your personal API Key with someone else, when they request PurpleAir sensor data, they will be using your points! A better solution is to save your API Key in a separate file that you keep and then provide code in the R script you are working worth that then looks for the file with your API Key and reads in the key.

In this example, suppose that the API Key for a given project is `YOUR_API_KEY` and the variable name to reference it is called `PurpleAir_API`.

1.  Create a new R script by clicking on **File** \> **New File** \> **R Script**.

2.  Copy the following R code below by clicking on the clipboard icon on the top right of the block. On the first line of this new blank R script, paste this one line of code. Replace the text `YOUR_API_KEY` with your unique PurpleAir API Key in quotes associated with the project. When the API Key is referenced within your R script, it will be called `PurpleAir_API`.

    ```{r API_KEY}
    #| eval: false
    PurpleAir_API = "YOUR_API_KEY"
    ```

    ::: callout-caution
    Your PurpleAir API Key must be in single-quotes or double-quotes for this to work. API Keys are recognized in R as character strings. In RStudio, character strings are written in a forest green color to easily identify character strings.
    :::

3.  Save this R file in the **same** folder as the R file you will use the API Key. In this example, we save the R file as `API_KEY.R`. Once you have saved the R file that contains your API Key, you may then close the file.

    ::: callout-caution
    Make sure you supply the `.R` file extension at the end of the file name when naming and saving the file. RStudio will **not** add this file extension on for you when you go to save the file. If you do not include the `.R` suffix, your computer may not recognize how to open the file.
    :::

### Read PAS Data With API Key {#sec-createPAS}

PurpleAir sensor readings are uploaded to the cloud every 120 seconds. (Every 80 seconds prior to a May 31, 2019 firmware upgrade.) Data are processed by PurpleAir and a version of the data is displayed on the PurpleAir website.

The PAS object that will be pulled from PurpleAir is a large data frame with a record for each PurpleAir sensor channel (2 channels per sensor). There are several steps that must be accomplished before the PurpleAir dashboard can be utilized to bring in sensor data. The R script `new_pas.R` contains a function `new_pas()` that performs these background processes automatically. To load in the function, you must source the function from the `new_pas.R`, assuming it has already been downloaded to the R project folder (@sec-download).

```{r load_new_pas}
# Load in the new_pas() function from file
source("new_pas.R")
```

::: callout-tip
Before continuing, make sure you have created an API Key (@sec-createAPI) and saved it to a file (@sec-setAPI). The `new_pas()` will automatically search for the API Key in the R script provided by the `API_filename` option and sets the API Key each time `new_pas()` is called to create a PAS file. It is not required that the API Key be set prior to running this function.
:::

The `new_pas()` function has several options available you can specify:

-   `pas_filename`: Name of the PAS file (in quotes) that will be created.

-   `API_filename`: The name of the file (in quotes) where the API Key is saved as the variable name `PurpleAir_API` (@sec-setAPI). In this vignette, the name of the file is `API_KEY.R`.

-   `countryCodes`: Identify the country to subset the sensor data from (in quotes); defaults to `"US"`.

-   `stateCodes`: Identify the U.S. state codes to subset the sensor data from (in quotes); defaults to `"OH"`.

-   `counties`: The US county names or 5-digit FIPS codes (in quotes), defaults to `"Hamilton"`.

-   `lookbackDays`: The number of days to look back to include only sensors with data more recent than specified; defaults to 7.

-   `location_type`: Whether outside (`0`), inside (`1`), or both (`NULL`) sensors are requested; defaults to `NULL`.

As an example, suppose we wish to create a PAS showcasing all (indoor and outdoor) PurpleAir sensor data within Hamilton County, Ohio from the past 7 days. The PAS will be created and saved in a file called `"PAS_Hamilton.rds"`. Here is how the `new_pas()` is used to achieve this:

```{r new_pas}
#| eval: false
# Create new PAS of Hamilton County, Ohio sensors from past 7 days
pas <- new_pas(pas_filename = "PAS_Hamilton.rds", API_filename = "API_KEY.R",
               countryCodes = "US", stateCodes = "OH", counties = "Hamilton",
               lookbackDays = 7, location_type = NULL)
```

When this code is run, the following steps are performed in this order:

1.  The necessary packages `here`, `AirSensor`, and `MazamaSpatialUtils` are loaded if they are not already. This is to ensure all necessary functions are recognized and the rest of the steps will work.

2.  The function then checks if a PAS with `pas_filename` has already been created inside the root working directory `folder_location`. If the function finds the file, it is then loaded into the R environment. If the file does not exist, the function then asks the user whether they would like to create a new PAS using points associated with the API Key. Respond to the prompt by typing either `Y` (Yes) to continue with the steps (required if you have never created a PAS file) or `N` (No) to abort the process.

    ::: callout-tip
    If you run this function after creating a PAS file named `pas_filename`, it should detect that file and read it in automatically without calling on the PurpleAir dashboard and having to waste points recreating the PAS data.
    :::

3.  The function then sets the API Key. The function checks the project folder for the file `API_KEY.R`. If the API_KEY.R file has been created, it is read in and the variable `PurpleAir_API` is then set as the API Key. An error message displays if the function is unable to find the file with the API Key or set the API Key. If you changed your API Key, running this function will automatically update to the new API Key.

    ::: callout-warning
    You must create and set a valid API Key before you can read data from the PurpleAir dashboard. This involves creating a project with the PurpleAir dashboard and then saving the API Key to your computer as its own file (in this case, `API_KEY.R`). You do not need a new API Key each time a new PAS is created. For more information, see @sec-createAPI for creating API Keys and @sec-setAPI for saving and setting the API Key.
    :::

4.  The function next checks for various files containing spatial data on your computer. If you run `new_pas()` for the first time, the function goes online and downloads the necessary spatial data files and saves them in the project folder. This process is only done once - after which, the function simply checks to ensure those files are still present in that folder.

5.  The spatial data files are then initialized and brought into the R environment. The initialization is process must occur before any new PAS objects are created.

6.  After initialization, the function then proceeds to the PurpleAir dashboard and retrieves the sensor data from the cloud using the API Key. Points allocated with the PurpleAir API Key are then deducted. The data is then combined with the spatial data files to create the PAS object.

    ::: callout-important
    You must have enough points tied the API Key to complete the operation. The usage of your points varies depending on the query - click [here](https://community.purpleair.com/t/api-pricing/4523) for more details. If you do not have enough points, the operation will not be completed and an error message will be displayed. Click [here](https://api.purpleair.com/#api-keys-check-api-key) to learn more about the API Key and the data it can return. If you need to add more points, you can purchase more points to your account by clicking [here](https://community.purpleair.com/t/api-pricing/4523). Be very careful with how frequently you query the PurpleAir dashboard as you do not want to waste your points. Click [here](https://community.purpleair.com/t/api-use-guidelines/1589) to learn more about how you can optimize your points usage.
    :::

7.  The PAS object is then saved into a file named `pas_filename` in the `folder_location` folder on your computer. The next time that you run `new_pas()`, the function will check that the file is still present within the folder and load it back in.

## Exploring PAS Data {#sec-PAS-explore}

::: callout-note
For this demonstration, we will be using the example PAS from the `AirSensor2` package. This example PAS was generated on May 3, 2023 for sensors located in Washington and Oregon:

```{r pas_example}
# Example PAS from AirSensor package
pas <- AirSensor2::example_pas
```

For more information about the example PAS and how it was created, run the code below. This opens up a help documentation in the Output Pane:

```{r pas_help}
#| eval: false
# Open help documentation for example PAS
help(example_pas)
```
:::

::: callout-caution
All the following R code chunks can be adapted to your own PAS object you created in @sec-createPAS. You just need to be careful to specify the correct column and variable names. Once you work through this example PAS, you should try these commands with your own PAS files.
:::

Take a look at the first 10 rows of the PAS data frame:

```{r pas_print}
# Examine the first 10 rows
print(pas, n=10, max_footer_lines=0)
```

There are `r nrow(pas)` columns and `r ncol(pas)` columns of the data frame. Not every column and row is displayed here. Each row of the PAS object corresponds to a unique PurpleAir sensor, identified by the `deviceDeploymentID` column, at this one moment in time. Each sensor records several columns of data, which we can take a look at below:

```{r pas_col}
# Get list of column names
names(pas)
```

At a glance, the PAS has several useful columns of data we can explore. There are column recordings of temperature, relative humidity, pressure, and air quality. We are interested in PM~2.5~ (particulate matter smaller than 2.5 micrometers in diameter). There are 6 columns related to PM~2.5~ measurements. These are average PM~2.5~ measurements taken by the sensor for a certain period of time. Notice how each column starts with the prefix `pm2.5`.

We can pull only those columns that begin with this prefix and store them as a new R object. Each row corresponds to one sensor so it is also a good idea to include the `locationID` of each sensor with our new `pm25` object. The code below takes the pas R object and then uses the `select()` function to choose `locationID` that starts with `pm2.5_` as the variable name (notice the use of quotes here!). The `%>%` operator is called a pipeline operator that is available in the `dplyr` package (and others) which can accomplish this process in one execution.

::: callout-caution
The variable names of the PAS file you use may change depending on where you source your data from. Make sure you adapt the variable names such as `locationID` and `pm2.5_` exactly (case-sensitive, spelling, punctuation) so they match exactly as they are specified in your PAS data frame.
:::

```{r pm25}
# Take a look at only PM2.5 data
pm25 <- pas %>%
  select(locationID, starts_with("pm2.5_"))
print(pm25, n=10)
```

Each row of this new `pm25_data` object corresponds to one PurpleAir sensor at a given location. Now that we have our PM~2.5~ data setup, we can now create maps to explore PM~2.5~ observations by location.

<!--# As of a recent 'knitr' update version 1.43, the leaflets are not rendering correctly in the HMTL output Quarto renders. There is a 'eval' option to turn off the leaflets if they do not display correctly or a ERROR message results when rendering the HTML output. To get them to render correctly, you must downgrade 'knitr' to version 1.42, shown below: -->

```{r knitr_down}
#| eval: false
#| echo: false
# Remove latest version of 'knitr' package (if upgraded past 1.42)
remove.packages(knitr)

# Install 'knitr' package version 1.42
require(devtools)
install_version("knitr", version = 1.42)
```

Display a map of the 1-hour average PM~2.5~ measurement for each sensor:

```{r leaflet_pm25}
#| eval: true
# Plot interactive leaflet map of 1-hour average PM2.5
pas %>%
  pas_leaflet(parameter = "pm2.5_60minute")
```

A map is shown of all the sensors with their 1 hour average PM~2.5~ measurements. The icons represent one scanner, colored based on their measurement. Clicking on one of the icons brings up the device's ID, sensor index, location, temperature, humidity, and average PM~2.5~ measurements over a 1-hour and 24-hour period.

::: callout-note
Take notice of the `sensor_index` that is displayed for each sensor. You will need a `sensor_index` to create a PAT file later in @sec-pat.
:::

PAS data can consist of quite a number of sensors, resulting in many icons to select from in the map. We may wish to filter sensors based on their readings so that only those sensors who meet our filtering criteria appear on the map. This is useful, for example, if we are interested in identifying locations with high PM~2.5~ concentrations. The `pas_filter()` function can be used to filter sensors by state (with `stateCode`) and by a filtering criterion before it is passed to the `pas_leaflet()` function. In the example below, we identify sensors who register at least a 24-hour PM~2.5~ average of 12.0 micrograms per cubic meter - the equivalent of registering a Moderate [Air Quality Index (AQI)](https://www.epa.gov/sites/default/files/2016-04/documents/2012_aqi_factsheet.pdf):

```{r leaflet_filter}
#| eval: true
# Filter sensors with moderate air quality
pas %>%
  pas_filter(pm2.5_24hour > 12.0) %>%
  pas_leaflet(parameter = "pm2.5_24hour")
```

The PurpleAir sensors not only record PM~2.5~ data but they also record temperature and relative humidity as well. The following example displays the (high) temperature reading of all these sensors that are not missing:

```{r leaflet_temperature}
#| eval: true
# Plot interactive map of temperature, removing missing data
pas %>%
  pas_filter(!is.na(temperature)) %>%
  pas_leaflet(parameter = "temperature")
```

The `sensor_index` identifies the unique PurpleAir sensor. When clicking on the icons inside the interactive map, the `sensor_index` of each sensor is displayed. The `pas_filter()` function can filter all rows of the PAS specifically tailored to a `sensor_index`. Combined with the `pas_leaflet()` function, a map is displayed showing where the PurpleAir sensor that has the unique `sensor_index` identifier.

```{r sensor_index}
# Identify the location of a single sensor
pas %>%
  pas_filter(sensor_index==76545) %>%
  pas_leaflet()
```

This displays a map showing where sensor with `sensor_index = 76545` is located (Gathard Engineering in Seattle, WA).

::: callout-tip
The PAS file can easily identify the unique `sensor_index` of a particular PurpleAir sensor you wish to analyze further. As you explore the interactive map, make a note of which `sensor_index` you would like to study. This will be referenced in @sec-pat with the `new_pat()` function. In the next section, we will reference this same PurpleAir sensor (`sensor_index = 76545`) in the example PAT file (see @sec-PAT-explore).
:::

# Time Series (PAT) Data {#sec-timeseries}

**Time series** data provides a minute-by-minute database structure for transforming and analyzing [PurpleAir](https://www.purpleair.com/) sensor data. Unlike spatial data, which is geared for analyzing multiple sensors at one point in time, time series data focuses on a single PurpleAir sensor over time. In this manner, time series data allows the user to examine trends in air quality, temperature, and relative humidity recorded by one sensor.

## Create PAT from PurpleAir {#sec-pat}

PurpleAir sensor readings are uploaded to the cloud every 120 seconds where they are stored for download and display on the PurpleAir website. After every interval, the synoptic data is refreshed and the outdated synoptic data is then stored in a [ThingSpeak](https://thingspeak.com) database.

In order to access the ThingSpeak channel API we must first load the synoptic database object (PAS), which was discussed in @sec-createPAS. Once the PAS data frame has been loaded, we then create a **PurpleAir Time Series (PAT)** object by specifying the sensor and the dates from which to pull data from. Since this requires drawing data from the PurpleAir API dashboard, an API key (@sec-setAPI) is required to access this data to create the PAT object.

Just like the `new_pas.R` script in @sec-createPAS, the R script `new_pat.R` contains a function `new_pat()` that performs the process of creating a PAT data frame automatically. To load in the function, you must source the function from the `new_pat.R`, assuming it has been downloaded to the project folder (@sec-download).

```{r load_new_pat}
# Load in the new_pat() function from file
source("new_pat.R")
```

::: callout-warning
**A PAS file is required to create a PAT file.** Make sure you have created an PAS file @sec-createPAS and have a API Key (@sec-createAPI) saved to a file (@sec-setAPI). The `new_pat()` will check for the PAS file and if it does not detect a PAS file, the function will ask you to create a PAS file first using the `new_pas()` function. The `new_pat()` function also requires that a vaild API Key has been set. The function automatically search for the API Key in the R script `API_KEY.R` and sets the API Key for you. It is not required that the API Key be set prior to running this function.
:::

PAT files put emphasis on a single PurpleAir sensor. Each sensor comes with its own unique identifier. In the PAS file, this identifier is called the `sensor_index`. All measurements taken by a scanner will be authored by the `sensor_index`. If one is only interested in the measurements of a particular scanner, the PAT file can pull information from the PurpleAir dashboard for that scanner over time.

::: callout-tip
It is highly recommended that you select only one sensor from the PAS file you would like to examine over time. It is possible to create PAT files for more than one sensor, however, it is more convenient to have one PAT file represent just one PurpleAir sensor. This creates PAT files of manageable size for portability. Lots of information is collected from a single sensor and file sizes can become large if multiple sensors or multiple periods are requested. You can always read in multiple PAT files and combine them later if needed.
:::

The first step in creating the PAT file is to identify the sensor to record measurements from. In this example, the PurpleAir sensor we will study is located at Cincinnati's Fire Department Station 12, located at 3001 Spring Grove Ave, Cincinnati, OH 45225. Their PurpleAir sensor has `sensor_index = 176557`.

::: callout-tip
One easy way of identifying the `sensor_index` of the PurpleAir sensor you want is to use the [online PurpleAir map](https://map.purpleair.com/1/mAQI/a10/p604800/cC0?select=176557#12.87/39.12646/-84.53578). Use this map to locate the sensor you wish to study and click on its icon. Hover your cursor over the text **Get This Widget**, revealing a pop-up window that contains the `sensor_index`.

![The `sensor_index` is usually shown in the `id` field of the widget on the [PurpleAir map](https://map.purpleair.com/1/mAQI/a10/p604800/cC0?select=176557#12.87/39.12646/-84.53578).](purpleair_map.png){fig-align="center" width="350"}

A sure-fire way to identify a particular scanner and determine its `sensor_index` is to create a map of all the scanners inside the PAS data using `pas_leaflet()` to plot them (@sec-PAS-explore). You can then use the map to find the scanner you wish to analyze. Clicking on the icon of the scanner on the map will display information about the scanner, including its `sensor_index`.
:::

From this scanner in the PAS file `PAS_Hamilton.rds` that was created in @sec-createPAS, we wish to create a PAT file showcasing all PurpleAir sensor data from this sensor (`sensor_index = 176557`) from July 1, 2023 to July 8, 2023. The PAT will be created and saved in a file called `"July_CFD12.rds"`. Here is how the `new_pat()` is used to achieve this:

```{r new_pat}
#| eval: false
# Create new PAT of one sensor from July 1 through July 8
pat <- new_pat(pat_filename = "July_CFD12.rds", pas_filename = "PAS_Hamilton.rds",
               API_filename = "API_KEY.R", sensor_index = 176557,
               start_date = "2023-07-01", end_date = "2023-07-08")
```

The `new_pat()` function has several options available you can specify:

-   `pat_filename`: Name of the PAT file (in quotes) that will be created.

-   `pas_filename`: Name of the PAS file (in quotes) that will be used to identify the sensor_index. A PAS file must be created before creating a PAT file. See @sec-createPAS for details.

-   `API_filename`: The name of the file (in quotes) where the API Key is saved as the variable name `PurpleAir_API` (@sec-setAPI).

-   `sensor_index`: The unique number indicator of the PurpleAir sensor you wish to analyze.

-   `start_date`: The start date to start reading data (in quotes), formatted as `"YYYY-MM-DD"`.

-   `end_date`: The end date to stop reading data (in quotes), formatted as `"YYYY-MM-DD"`.

-   `time_zone`: The Olson timezone used to interpret dates (in quotes); default is UTC.

-   `average`: Temporal averaging in minutes performed by PurpleAir; default is 0, meaning all data recorded by the sensor is instant. Values include 10, 30, 60 (hour), 360, 1440 (day).

When this code is run, the following steps are performed in this order:

1.  The necessary packages `here`, `AirSensor`, and `MazamaSpatialUtils` are loaded if they are not already. This is to ensure all necessary functions are recognized and the rest of the steps will work.

2.  The function then checks if a PAT with `pat_filename` has already been created. If the function finds the file, it is then loaded into the R environment. If the file does not exist, the function then asks the user whether they would like to create a new PAT using points associated with the API Key. Respond to the prompt by typing either `Y` (Yes) to continue with the steps (required if you have never created a PAT file) or `N` (No) to abort the process.

    ::: callout-tip
    If you run this function after creating a PAT file named `pas_filename`, it should detect that file and read it in automatically without calling on the PurpleAir dashboard and having to waste points recreating the PAT file.
    :::

3.  The function then sets the API Key by checking the R project folder for the file `API_KEY.R`. If the function finds it, then the file is sourced in and the variable `PurpleAir_API` is then set as the API Key. An error message displays if the function is unable to find the file with the API Key or set the API Key. If you changed your API Key within the `API_KEY.R` file, `new_pat()` will automatically update the API Key for you.

    ::: callout-warning
    You must create and set a valid API Key before you can read data from the PurpleAir dashboard. This involves creating a project with the PurpleAir dashboard and then saving the API Key to your computer as its own file (in this case, `API_KEY.R`). The API Key is unique and is tied to the user, not the project. You do not need a new API Key each time a new PAT is created. For more information, see @sec-createAPI for creating API Keys and @sec-setAPI for saving and setting the API Key.
    :::

4.  The function next checks that the required PAS file exists. If the file does not exist, the user is asked to run `new_pas()` function to create one first.

    ::: callout-tip
    If you used `new_pas()` in @sec-createPAS, then the PAS file should already exist and the `new_pat()` function should automatically read it in for you.
    :::

5.  The function then proceeds to the PurpleAir dashboard and retrieves all the data from the sensor from the cloud between the `start_date` and `end_date` using the API Key and the PAS file. Points allocated with the PurpleAir API Key are then deducted. The data is then combined with the spatial data files to create the PAS object.

    ::: callout-important
    You must have enough points tied the API Key to complete the operation. The usage of your points varies depending on the query - click [here](https://community.purpleair.com/t/api-pricing/4523) for more details. If you do not have enough points, the operation will not be completed and an error message will be displayed. Click [here](https://api.purpleair.com/#api-keys-check-api-key) to learn more about the API Key and the data it can return. If you need to add more points, you can purchase more points to your account by clicking [here](https://community.purpleair.com/t/api-pricing/4523). Be very careful with how frequently you query the PurpleAir dashboard as you do not want to waste your points. Click [here](https://community.purpleair.com/t/api-use-guidelines/1589) to learn more about how you can optimize your points usage.
    :::

6.  The PAT object is then saved into a file named `pat_filename` in the R project folder on your computer. The next time that you run `new_pat()`, the function will check that the file is still present within that folder and load it for you.

## Exploring PAT Data {#sec-PAT-explore}

::: callout-note
All the following R code chunks can be adapted to your own PAT object you create (@sec-pat). For this demonstration, we will be using the example PAT from the AirSensor package to avoid long waiting times. The example PAT was generated for a specific sensor with `sensor_index=76545` in Seattle, Washington between January 1, 2023 and January 2, 2023:

```{r pat_example}
# Example PAT from AirSensor package
pat <- AirSensor2::example_pat
```

For more information about the example PAT, run the code below. This opens up a help documentation describing how this PAT is generated:

```{r pat_help}
#| eval: false
# Open help documentation for example PAT
help(example_pat)
```
:::

::: callout-caution
All the following R code chunks can be adapted to your own PAT object you created in @sec-createPAS. You just need to be careful to specify the correct column and variable names. Once you work through this example PAT, you should try these commands with your own PAT files.
:::

The PAT object contains two data frames:

-   `meta` - Includes one row of data that does not change over time (e.g., device location, latitude, longitude, state, county, etc.)

    ```{r pat_meta}
    # Variables that do not change with time
    names(pat$meta)
    ```

-   `data` - Includes time series data that changes with time. Each row corresponds to a snapshot of data taken from sensor_index 3515 at a certain time (in UTC) and date.

    ```{r pat_data}
    # Examine time series data
    print(pat$data, n=10)
    ```

As you can see, the PurpleAir sensor takes frequent measurements of temperature, humidity, and air quality. As the PAT object shows, these measurements change over time. We can take a look at trends for all these measurements by plotting the time series for each variable.

Let's explore the data contained within the PAT object:

```{r pat_names}
# Pull time series data from PAT
pat_data <- pat$data
names(pat_data)
```

There are several variables of interest: `humidity`, `temperature`, and `pressure`. Let's start by analyzing the temperature measurements from this PurpleAir sensor by creating a time series plot using `ggplot()` (comes from the `ggplot2` package):

```{r pat_temperature}
# Plot time series of temperature
pat_data %>%
  ggplot()+
  geom_line(aes(x=datetime, y=temperature), color="orange", lwd=1.0)+
  theme_bw()+
  xlab("Time")+
  ylab("Temperature")+
  ggtitle("PurpleAir Time Series Plot of Temperature")
```

The orange line appears because of the `geom_line()` statement. The x coordinate is the time variable `datetime` while the y coordinate is the variable of interest `temperature`. You can supply additional `ggplot()` functions as lines to customize the plot. In this example, `xlab()` adds a label for the x-axis, `ylab()` adds a label for the y-axis, and `ggtitle()` adds a title to the plot. The `theme_bw()` applies a default theme to the plot.

The PAT file also comes with PM~2.5~ measurements. These are typically recorded by two channels: Channel A and Channel B. In the example PAT file, there are several PM~2.5~ variables to analyze. Use the `names()` function to identify these variable names.

::: callout-warning
Be sure to check the names of the variables before running these plots. R is case sensitive and name sensitive so be very careful with how you specify the variable names. For example, even though `PM25`, `pm25`, `pm2.5`, and `PM2.5` all *appear* the same, these are classified as 4 different names. You may have to alter the variable name `pm2.5_alt_a` and `pm2.5_alt_b` to something different (like `pm25_A` and `pm25_B`, respectively) to get this code to work properly.
:::

Plot a time series of the PM~2.5~ measurement recorded by this scanner using `ggplot2`:

```{r pat_pm2.5_atm}
# Plot time series of PM2.5
pat_data %>%
  ggplot()+
  geom_line(aes(x=datetime, y=pm2.5_atm), color="purple", lwd=1.0)+
  theme_bw()+
  xlab("Time")+
  ylab("PM2.5")+
  ggtitle("PurpleAir Time Series Plot of PM2.5")
```

A time series plot is also useful to monitor the accuracy of the PM~2.5~ measurements. Since the scanner records PM~2.5~ data on two different channels, a time series plot of the PM~2.5~ readings by both channels can be used to identify periods where measurements between the two channels diverge.

```{r pat_pm2.5_atm_ab}
# Plot time series of PM2.5 from Channel A & B
pat_data %>%
  ggplot(aes(x=datetime))+
  geom_line(aes(y=pm2.5_atm_a, color="A"), lwd=0.6, alpha=0.7)+
  geom_line(aes(y=pm2.5_atm_b, color="B"), lwd=0.6, alpha=0.5)+
  scale_color_manual(name="Channel",
                     values = c("A"="red", "B"="blue"))+
  theme_bw()+
  theme(legend.position = "bottom")+
  xlab("Time")+ylab("pm2.5")+
  ggtitle("Two-Channel PurpleAir PM2.5")

```

A reliable scanner should have PM~2.5~ readings from Channel A and B that are closely related. In this plot, we see periods where PM~2.5~ readings were identical between Channel A and B. However, there were multiple instances where Channel A's reading was noticeably higher than that of Channel B.

# Acknowledgements {#sec-thanks}

Thanks to Dr. Cole Brokamp for proofreading the vignette, offering suggestions for downloading the R files from GitHub, and for suggesting me to lead this session. Special thanks to Dr. Daniel Hargraves and Dr. Patrick Ryan for allowing me to speak at the RISE Communities Program at Cincinnati Children's Hospital Medical Center. I also wish to thank Andrew Vancil and Erika Manning for working through the vignette during our weekly lab meeting, proofreading the manuscript, and offering suggestions to improve this tutorial.

If you have any comments or suggestions to improve this tutorial, I'd love to hear from you! Please email me your feedback at [stephen.colegate\@cchmc.org](stephen.colegate@cchmc.org).

# References

::: {#refs}
:::
