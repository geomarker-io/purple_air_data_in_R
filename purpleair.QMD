---
title: "PurpleAir API Dashboard Vignette"
subtitle: "A RISE Communities Program Presentation"
author: "Stephen Colegate"
date: "August 9, 2024"
format:
  html:
    output-file: "index.html"
    embed-resources: true
toc: true
toc-expand: true
toc-title: Contents
editor: visual
bibliography: purpleair.bib
number-sections: true
number-depth: 3
---

# Introduction {#sec-intro}

Air quality sensors have the potential to provide high spatial and temporal resolution data and their accessibility in terms of cost and ease of use [@collier-oxandale2022]. Open access to environmental data sets and related tools is possible through a stable and consistent *Application Programming Interface (API)* [@AirSensor] that allows software and application developers to build applications to display and report that data in transparent and meaningful ways [@feenstra2020].

In this document, we will present methods of accessing synoptic and time series data using R software with the `PurpleAir` package from the PurpleAir API dashboard interface [@brokamp]. We will then explore how to visualize both the spatial (in the form of maps) and temporal (in the form of time series plots) to determine air pollution trends.

::: callout-note
This rendered HTML of all the code and relevant output is hosted online on our [GitHub page](https://github.com/geomarker-io/purple_air_data_in_R/). All the R code in this vignette is contained in the `purpleair.R` file there. Instructions are provided in @sec-download to download this file directly from GitHub. As you follow along with this tutorial, try running all the available R code in the `purpleair.R` file to learn how to read in your PurpleAir data and do some basic data analysis with it.
:::

## Setup {#sec-setup}

Throughout this tutorial, we assume that you already have R and RStudio installed on your computer and know the basics with how to use the R programming language. You can install R on your computer by going to <https://cran.r-project.org/> and selecting the R version that is appropriate for your operating system [@rcoreteam2013]. After installing R, you will then need to install [RStudio Desktop](https://posit.co/download/rstudio-desktop/) - an *integrated development environment (IDE)* to help data scientists be more productive with R [@rstudioteam2020a].

This section describes how to set up your R session to prepare to work with the necessary packages, functions, and files that will be created, loaded and saved to your computer.

::: callout-important
It is highly recommended that you are somewhat familiar with using R and RStudio before continuing on with this vignette. If you want to learn more about the basics of R and RStudio, the [R tutorial vignette](https://colegasn.github.io/Rintro/) walks through everything you need to know before you begin.
:::

### New R Project {#sec-rproject}

First open RStudio on your computer. At the top left, click **File** \> **New Project**. A dialogue box should appear like the one shown below:

![Create a new R project within RStudio.](Rproject1.png){fig-align="center" width="400"}

::: callout-tip
If you already have the folder created where all project files will be kept, you can reference this folder by selecting **Existing Directory**. This loads a navigation box where you can select your folder.

![Select a folder that already exists to house the R project.](Rproject4.png){fig-align="center" width="400"}
:::

Select New Directory from the message box. This brings up a list of various project types. Select **New Project**.

![Click **New Project** to create a new R project.](Rproject2.png){fig-align="center" width="400"}

On the next screen (shown below), enter in the name of the project (e.g. `PurpleAir Demo`). Beneath the directory name, browse the location on your computer where to host the R project. This will create a subdirectory folder with the name of the project inside. All files created, saved, and loaded throughout this vignette will come from this folder.

![Type in the project name and select where to create the folder for the project.](Rproject3.png){fig-align="center" width="400"}

Leave all the other fields untouched. Click **Create Project** to start the new R project. RStudio then restarts the current R session inside of the project folder.

::: callout-tip
You can verify the R project you are currently in by looking for the project name in the top-right corner of RStudio. Clicking on this icon brings up a menu to create new R projects, close the existing project, or switch to a new project.
:::

### Download Files {#sec-download}

After creating a new R project, download the necessary R files from our [GitHub page](https://github.com/geomarker-io/purple_air_data_in_R/tree/main). First, download the `purpleair.R` file. Copy and paste the following line of code below into the console. To copy this code block, look for the clipboard icon located in the top-right corner of the code block and click **Copy to Clipboard**.

```{r purpleair.R}
#| eval: false
# Download 'purpleair.R' file from GitHub
download.file("https://raw.githubusercontent.com/geomarker-io/purple_air_data_in_R/main/purpleair.R", destfile = "purpleair.R")
```

Inside RStudio, in the Console Pane, paste this code at the command prompt `>` and press **ENTER**. R should then go to our GitHub page, look for the `purpleair.R` file, and download the file into your R project folder. Verify the file has been downloaded by clicking on the **Files** tab in the Output Pane. Click on the `purpleair.R` file link inside the Files tab to open the R file inside RStudio. The `purpleair.R` file should now be included in the Source Pane.

::: callout-tip
All the R functions that are given in this vignette are included in the `purpleair.R` file. Once you have the R file downloaded and opened in a RStudio session, you do not need to type in any more code, as all the code stated here is reproduced in `purpleair.R`. Simply highlight the code and execute it by clicking **Run** or use the `SHIFT`+`ENTER` keyboard shortcut.
:::

### R Packages {#sec-packages}

You will need to install the `PurpleAir` package in order to use the functions that are provided later in this vignette. Packages are created by R users who bundle their functions, data, documentation, and other information that can then be shared and downloaded by other R users. R packages are stored on the [Comprehensive R Archive Network (CRAN)](https://cran.r-project.org/) and require a internet connection to download. Learn more about the PurpleAir package by clicking [here](https://github.com/cole-brokamp/PurpleAir).

::: callout-caution
Packages need to only be installed one time. After a package has been installed, there is no reason to install the package again unless there is an updated version for it.
:::

To install the `PurpleAir` package, use the `install.packages()` function below.

```{r install_PurpleAir}
#| eval: false
# Install the PurpleAir package - only need to run once
install.packages('PurpleAir')
```

::: callout-caution
You may need to restart the R session in order for these packages to successfully install. If this is the case, select **Yes** when prompted to restart the R session. You may have to rerun the R code chunks again after restarting the session.
:::

![Downloading the `PurpleAir` R package to the User's Library.](install_package.png){fig-align="center" width="600"}

When this line of code is executed, RStudio goes to the CRAN and looks for a package called `PurpleAir` and begins installing the package automatically in your Users Library. Click on the **Packages** tab in the Output Pane and locate the `PurpleAir` package (along with several other packages) that have been installed.

![](packages_user.png){fig-align="center" width="500"}

::: callout-tip
R already comes with its own packages (e.g., data sets, graphics, etc.). You do not need to install these packages, as they are already preinstalled when R is first installed. You can view all the R packages installed on your computer by clicking on the **Packages** tab in RStudio on the Output Pane.
:::

::: callout-warning
It can take several minutes for all the packages to download and install on your computer. Do not run any code or stop the process by clicking on the stop sign icon in the top right of the Console Pane. Doing so can cause problems with the installation.
:::

Once the package has been installed, you must then load each package into the R environment by using the function `library()`:

```{r load_PurpleAir}
#| message: false
#| warning: false
# Load the PurpleAir package
library(PurpleAir)
```

::: callout-tip
A package only needs to be loaded in once per R session. Reloading a package will have no effect. You can check whether a package is successfully loaded by clicking on the **Packages** tab in the Output Pane. You can also load a package by selecting the open box next to the package name, browse package information on CRAN, and delete the package altogether from this list.

![List of Packages installed in the Output Pane. Loaded packages are indicated with a check mark.](packages.png){fig-align="center" width="450"}

Loading and unloading packages can be accomplished here by clicking on the check mark box.
:::

::: callout-caution
All open packages are unloaded when RStudio is closed or a new R session begins. Unlike the installation process where the packages are installed only once, you must load these packages every time you start a new R session. When you quit your R session and start a fresh session, you must reload the R packages again.
:::

Some R packages that will be useful are the `tidyverse` package and the `sf` package. Install these packages using the `install.packages()` function by specifying the names of these packages as a list, using the `c()` notation:

```{r install_packages2}
#| eval: false
# Install the tidyverse and sf packages - only need to run once
install.packages(c('tidyverse', 'sf'))
```

Once the package is installed, load these packages into the R environment using `library()`:

```{r load_packages}
#| message: false
#| warning: false
# Load required R packages
library(tidyverse)
library(sf)
```

::: callout-note
Some R packages depend on items that are handled by other R packages in order to function properly. These extra dependencies will be installed automatically if they are not present in the User Library. For example, installing the `tidyverse` package will also install the following other packages: `dplyr`, `forcats`, `ggplot2`, `lubridate`, `purrr`, `readr`, `stringr`, `tibble`, and `tidyr`.
:::

::: callout-caution
Sometimes, R will print a warning message if a package that is loaded could conflict with another package that is already loaded, like the one shown below:

![Function conflicts when loading the `tidyverse` package.](conflict.png){fig-align="center" width="650"}

This scenario appears if functions that share the same name but perform different actions from two or more packages. Functions from the latter package will mask functions that are included in packages loaded earlier by default. For example, the `filter()` function appears in both the `dplyr` package and the `stats` package. The `stats` package is loaded automatically when a new R session begins. When the `dplyr` package (a package that the `tidyverse` package depends on, or a *dependency*) is loaded into the session, this conflicts informs you that the `fitler()` function refers to the function in the `dplyr` package, not the `stats` package.
:::

::: callout-tip
You can refer to functions included with an R package without having to load the package itself. Use the `::` operator to refer to the package and the function with which you wish to use. From the previous caution box, `dplyr::filter()` refers to the `filter()` function in the `dplyr` package. This is handy if you require a specific function from a R package, but make sure you have the package installed first!
:::

# PurpleAir API Interface {#sec-API}

You can download the latest available PurpleAir sensor data from the PurpleAir website within your R environment. This method requires the user to create an account with PurpleAir and obtain an **Application Programming Interface (API)** key unique to the user to make specific queries.

The [**PurpleAir API dashboard**](https://develop.purpleair.com/home) allows users to create and manage their API keys and their usage. The dashboard requires a [Gmail](https://support.google.com/mail/answer/56256?hl=en) or [Google-associated](https://support.google.com/accounts/answer/27441?hl=en) account to sign in. The instructions below follow the [tutorial](https://community.purpleair.com/t/new-api-online-dashboard/3981) provided by PurpleAir.

::: callout-note
You will be notified through your [Gmail](https://support.google.com/mail/answer/56256?hl=en) or [Google-associated](https://support.google.com/accounts/answer/27441?hl=en) account whenever you make on the PurpleAir API dashboard, such as creating a project, archiving a project, creating an API Key, and making a query.
:::

## Create Project {#sec-createProject}

![The PurpleAir API dashboard for creating projects.](purpleair_projects.png){fig-align="center"}

First create a project by following these steps:

1.  Sign in to [develop.purpleair.com](https://develop.purpleair.com/home) using a [Gmail](https://support.google.com/mail/answer/56256?hl=en) or [Google-associated](https://support.google.com/accounts/answer/27441?hl=en) account.

2.  Click **Projects** along the top of the page.

3.  Click on **+Project** in the top right-hand corner of the page to add a new project.

    ![Creating a project in the PurpleAir API dashboard.](purpleair_addproject.png){fig-align="center" width="550"}

4.  Enter in a project name.

5.  Click **Create**.

Once a project has been created, it is then added to the Projects list. You can also archive old projects once you are finished with a project. Archived projects are stored under the **Archived projects** tab.

## Obtain API Key {#sec-createAPI}

![List of active API Keys on the PurpleAir dashboard.](purpleair_apikey.png){fig-align="center"}

To obtain your unique API key follow these steps:

1.  Sign in to [develop.purpleair.com](https://develop.purpleair.com/home) using a [Gmail](https://support.google.com/mail/answer/56256?hl=en) or [Google-associated](https://support.google.com/accounts/answer/27441?hl=en) account.

2.  Click **API Keys** along the top of the page.

3.  Click on **+ API Key** in the top right-hand corner of the page.

    ![](purpleair_createkey.png){width="287"}

4.  A window appears on the right of the webpage. You should see the auto-populated project name you created earlier (@sec-createProject). You can have several projects and several API keys at a time. Select the appropriate project if you have multiple projects.

5.  Select **Read** under "Choose key type", select **Enabled** under "Choose status" , and leave all the other fields blank.

6.  Click **Create**.

You should then see your unique API key for the project. You can associate multiple API keys to one project.

::: callout-warning
API keys are issued per user, not per sensor. Make sure that you have enough points allocated for the query before running the code. You do not want to waste points by running and downloading data that you may already have downloaded.
:::

## Set API Key {#sec-setAPI}

The API Key is an access token that allows you to pull PurpleAir sensor data from the cloud into your R session environment (see @sec-createAPI to learn how to create API Keys). Each user begins with 1,000,000 points for free. Each time you tell R to fetch PurpleAir data from the PurpleAir API, points will be deducted from your account. The number of points that will be deducted depends on how much data that you request when you query the API. The more data that you request, the more points that you will use.

::: callout-warning
You must have enough points in your account to be able to complete a query from the PurpleAir API. If you do not have enough points to complete the data query, an error message will appear in R stating that there's not enough points to complete the action. You can purchase additional points through the PurpleAir API interface dashboard online. Click the **Purchase Points** along the top-right of the webpage and follow the instructions to add additional points to your account. Different rates are available depending on the purchase price.

![Purchasing and adding points to a PurpleAir API account.](api_pay.png){fig-align="center" width="1800"}
:::

It is not ideal to leave your API Key in a R script. If you share any of these documents that include your personal API Key with someone else, when they go to request PurpleAir sensor data, they will be using your points! A better solution is to save your API Key in a separate file that you keep private and then include code in the R script that will look for the private file and reads in your API Key from it.

Follow these steps to setup a secure method of loading your API Key into your R environment:

1.  Create a new R script by clicking on **File** \> **New File** \> **R Script**.

2.  Copy the following R code below by clicking on the clipboard icon on the top right of the code block. On the first line of the new blank R script, paste this one line of code. Replace the text `PASTE_API_KEY_HERE` with your unique PurpleAir API Key in quotes associated with the project.

    ```{r API_KEY}
    #| eval: false
    PURPLE_AIR_API_KEY = "PASTE_API_KEY_HERE"
    ```

    Click on **API Keys** along the top of the webpage to list all your active API Keys. Under the API Key you wish to copy, click on **:** and then click **Copy Key** to copy the API Key to the clipboard. Paste the API Key in the new blank R script where the text `PASTE_API_KEY_HERE` is, ensuring that your API Key is in quotes. When the API Key is referenced within your R environment, it will be referenced as the variable `PURPLE_AIR_API_KEY`.

    ::: callout-caution
    Your PurpleAir API Key must be in single-quotes or double-quotes for this to work. API Keys are recognized in R as character strings. In RStudio, character strings are written in a forest green color to easily identify character strings.
    :::

3.  Save this R file in the **same** folder as the R file you will use the API Key. In this example, we save the R file as `API_KEY.R`. Once you have saved the R file that contains your API Key, you may then close the file.

    ::: callout-caution
    Make sure you supply the `.R` file extension at the end of the file name when naming and saving the file. RStudio will **not** add this file extension on for you when you go to save the file. If you do not include the `.R` suffix, your computer may not recognize how to open the file.
    :::

4.  Return to the `purpleair.R` file. Run the following code below to source the API Key from the `API_KEY.R` file:

    ```{r source_API}
    # Read the 'API_KEY.R' file containing your API Key
    source("API_KEY.R")
    ```

    If done correctly, R should read in the contents of the `API_KEY.R` file and pull in your API Key as a character string called `PURPLE_AIR_API_KEY`. Your API Key should be listed in the **Environment** tab in the Environment Pane.

5.  Once the API Key is brought in, set it by running the following line of code:

    ```{r}
    # Set the API Key
    Sys.setenv(PURPLE_AIR_API_KEY = PURPLE_AIR_API_KEY)
    ```

    The API Key should now be tied to your current R session. Verify that your API Key is valid by running the following code:

    ```{r verify_API}
    # Check that your API Key has been set correctly
    check_api_key(PURPLE_AIR_API_KEY)
    ```

Click [here](https://community.purpleair.com/t/using-the-api-dashboard/3981) to learn more about how to use the API dashboard. Click [here](https://community.purpleair.com/t/about-the-purpleair-api/7145) to learn more about how to set up and use API Keys with the PurpleAir API dashboard.

# PurpleAir Data Exploration {#sec-exploration}

PurpleAir sensor readings are uploaded to the cloud every 120 seconds. (Every 80 seconds prior to a May 31, 2019 firmware upgrade.) Data are processed by PurpleAir and a version of the data is displayed on the PurpleAir website. In this section, we will query the PurpleAir API to download sensor data into the R environment.

::: callout-warning
You must have a valid PurpleAir API Key in order to query PurpleAir sensor data from the PurpleAir API dashboard. The API Key must be validated before requesting PurpleAir data. Please read @sec-setAPI to set up a valid API Key. You must also have enough points in your account to query the PurpleAir API dashboard.
:::

## Single Sensor Data

This exercise will pull the latest observations from a single PurpleAir sensor. In order to download data from a PurpleAir sensor, a specific sensor must first be identified. The `sensor_index` is a unique identifier of a PurpleAir sensor that can be obtained from the PurpleAir API dashboard. Learn more about how to obtain the `sensor_index` of a particular sensor by clicking [here](https://community.purpleair.com/t/sensor-indexes-and-read-keys/4000). The easiest way to identify the `sensor_index` of the PurpleAir sensor you wish to analyze is by using the [PurpleAir Real-Time Air Quality Map](https://map.purpleair.com/).

![The [PurpleAir Real-Time Air Quality Map](https://map.purpleair.com/) showcasing all the latest data from PurpleAir sensors.](purpleair_map.png){fig-align="center"}

First locate a PurpleAir sensor you wish to analyze by going to where the sensor is located on the map. In this example, the PurpleAir sensor from the Cincinnati Fire Department Station #12 in located on [3001 Spring Grove Ave, Cincinnati, OH 45225](https://www.google.com/maps/place/Cincinnati+Fire+Department+Station+12/@39.1359167,-84.5434905,17z/data=!3m1!4b1!4m6!3m5!1s0x8841b4698703cc11:0x1cc8b1a092da8625!8m2!3d39.1359167!4d-84.5409156!16s%2Fg%2F11bwj92xv3!5m1!1e1?entry=ttu "Cincinnati Fire Department Station #12") in Camp Washington is identified.

![The PurpleAir sensor from Cincinnati Fire Department Station #12 in Camp Washington.](cfd12.png){fig-align="center" width="600"}

Click the icon of the reading from the sensor to examine both current and historical trends. Inside the pop-up box for the sensor, hover you mouse over **Get This Widget**. Inside the `id` field is the `sensor_index`, which is highlighted in the picture below.

![The `sensor_index` is listed in the `id` field under the **Get This Widget** icon.](sensor_index.png){fig-align="center" width="280"}

From the image above, the `sensor_index` for the PurpleAir sensor at Station #12 is `176557`. Alternatively, hover your mouse over the **Get This Widget** icon and click **Download Data**. A new webpage should open. Check the URL of the webpage that just opened and the `sensor_index` should be listed at the tail-end of the URL.

![The `sensor_index` is provided at the end of the URL that opens when you click **Download Data** under the **Get This Widget** icon.](sensor_index2.png){fig-align="center" width="500"}

There are many fields that you can choose from when requesting data from PurpleAir. Click [here](https://api.purpleair.com/#api-sensors-get-sensor-data) to read the documentation on all the available information that you can query from each sensor. The `sensor_index` will be needed to identify a particular sensor when the PurpleAir API is queried. The `get_sensor_data()` function from the `PurpleAir` package can retrieve information from the PurpleAir API for a single sensor with a provided `sensor_index`. Inside the function, the `sensor_index` is specified for the specific sensor. The option `fields` is a list of variables that are requested from this sensor. The `fields` option is specified as a list (indicated by `c()`) where each variable name is a character string (i.e. in quotes) separated by commas.

<!--# To prevent burning away PurpleAir points, the results that are obtained from each API request has been saved to .RData files. These data files are loaded back in and printed as if they were queried from the API. The code that does this is hidden from the reader so they are unaware of this workaround. -->

```{r pull_data}
#| eval: false
# Get latest data from a single sensor
sensor_data <- get_sensor_data(sensor_index = 176557,
                               fields = c("name", "last_seen",
                                          "pm2.5_cf_1", "pm2.5_atm"))
sensor_data
```

```{r pull_data2}
#| echo: false
# Read in the result that should be obtained from the API
sensor_data <- readRDS(file="sensor_data.RDS")
sensor_data
```

When this code is executed, points are deducted from your API account to retrieve the requested data and then stored in an R data object called `sensor`. The information that is returned is given by what was listed in the `fields` option. In this specific example, the following items are returned:

-   `"name"`: Identifies the name of the sensor with `sensor_index` of 175413.

-   `"last_seen"`: Indicates the timestamp of the latest available information that the PurpleAir API has of this particular sensor.

-   `"pm2.5_cf_1"`: The recorded PM~2.5~ observation using the CF=1 formula.

-   `"pm2.5_atm"`: The recorded PM~2.5~ observation using the CF=ATM formula. To learn more about the difference between the CF=1 and CF=ATM formulas, click [here](https://community.purpleair.com/t/what-is-the-difference-between-cf-1-atm-and-alt/6442).

::: callout-tip
Consult [this website](https://api.purpleair.com/#api-sensors-get-sensor-data) to look at other fields that you can specify and retrieve. Some of the fields that you can specify include PM~1.0~, PM~10~, PM~2.5~, temperature, humidity, atmospheric pressure, O~3~ (ozone) and VOC concentration. Just make sure to include the name of the field you want in the list in quotes.
:::

::: callout-note
By default, the PurpleAir R package retries failed API requests related to an underlying HTTP error (for example, the network or website is down) or a transient API error (i.e., 429, 503). Before retrying each failed request, the PurpleAir package will wait approximately two seconds before trying the request again. Successive failed requests result in exponentially longer waiting times (set using the function `httr2::req_retry()`). It is possible to specify the maximum number of seconds to wait (by default 45) with the environment variable `PURPLE_AIR_API_RETRY_MAX_TIME`.
:::

## Multiple Sensor Data

A list in R is specified with `c()`, with elements separated by commas. In the previous R code, all the variables that we wish to retrieve were in quotes separated by commas inside `c()` for the `fields` option within the `get_sensor_data()` function. A list can be passed within the `get_sensors_data()` function to retrieve data from multiple PurpleAir sensors.

::: callout-caution
Note that `get_sensor_data()` and `get_sensors_data()` are two different functions (notice the `s` on the word `sensor` on the latter function). The `get_sensor_data()` retrieves information only from a single sensor, while the `get_sensors_data()` retrieves information from multiple sensors. Be aware of the function that is specified, as there are different options that are available between the functions.
:::

Specify the `sensor_index` in the option `x` as a list, like in the example below:

```{r pull_multiple}
#| eval: false
# Get latest data from multiple sensors
multiple_data <- get_sensors_data(x = c(176557, 184705, 177011),
                                  fields = c("name", "last_seen",
                                             "pm2.5_cf_1", "pm2.5_atm"))
multiple_data
```

```{r pull_multiple2}
#| echo: false
# Read in the result that should be obtained from the API
multiple_data <- readRDS(file="multiple_data.RDS")
multiple_data
```

In the above example, the latest sensor data of `"name"`, `"last_seen"`, `"pm2.5_cf_1"` and `"pm2.5_atm"` will be retrieved for the following PurpleAir sensors:

-   `176557`: The Cincinnati Fire Department Station #12 sensor at [3001 Spring Grove Ave, Cincinnati, OH 45225](https://www.google.com/maps/place/Cincinnati+Fire+Department+Station+12/@39.1359167,-84.5434905,17z/data=!3m1!4b1!4m6!3m5!1s0x8841b4698703cc11:0x1cc8b1a092da8625!8m2!3d39.1359167!4d-84.5409156!16s%2Fg%2F11bwj92xv3!5m1!1e1?entry=ttu "Cincinnati Fire Department Station #12") in Camp Washington, Ohio.

-   `184705`: The Cincinnati Zoo sensor at [3400 Vine St, Cincinnati, OH 45220](https://www.google.com/maps/place/Cincinnati+Zoo+%26+Botanical+Garden/@39.1441388,-84.5103459,17z/data=!3m1!4b1!4m6!3m5!1s0x8841b39afdef07ed:0x8b070207c0a45d49!8m2!3d39.1441388!4d-84.5084898!16zL20vMDE1ZjBw!5m1!1e1?entry=ttu "Cincinnati Zoo") in Clifton, Ohio.

-   `177011`: Trinity Episcopal Church at [326 Madison Ave, Covington, KY 41011](https://www.google.com/maps/place/Trinity+Episcopal+Church/@39.0874464,-84.5155709,16z/data=!3m1!4b1!4m6!3m5!1s0x8841b1380e79bca7:0xec0afa805fa4cc0c!8m2!3d39.0874465!4d-84.5107!16s%2Fm%2F02qfjxm!5m1!1e1?entry=ttu "Trinity Episcopal Church") in Covington, Kentucky.

## Sensors in a Specified Area

In the previous section, the `sensor_index` of every sensor must be specified as a list. It is also possible to simply specify a area on a map and retrieve the available sensor information from that area. A *boundary box* is a rectangular box that is drawn on a map, defined by latitude and longitude coordinate pairs of its four corners. The idea is to go to the area of interest on the map, draw the boundary box that covers the desired area, and identify the minimum and maximum latitude and longitude coordinates that make up the boundary box. A free tool that can help identify the coordinates of a boundary box on a map is [OpenStreetMap](https://www.openstreetmap.org/).

1.  Go to the [OpenStreetMap](https://www.openstreetmap.org/) website and zoom in to the area of interest on the map. In this example, we will examine the area north of Downtown Cincinnati, including Over-the-Rhine, the West End, Mount Auburn, Mount Adams and Pendleton.

2.  Click on **Export** at the top of the webpage. A pane opens on the left side of the screen, indicating the coordinates of the boundary box that covers the entire view that is currently visible on the webpage.

3.  Click on **Manually select a different area** to bring up a boundary box on-screen.

4.  Adjust the boundary box on-screen by clicking and dragging the four corners of the box so that it completely covers the area of interest.

    ![A boundary box drawn north of Cincinnati, Ohio in [OpenStreetMap](https://www.openstreetmap.org/).](OpenStreetMap.png)

5.  The four numbers on the left panel under **Export** identify the four coordinates that are needed to define the boundary box:

    -   `xmin`: The left number.

    -   `xmax`: The right number.

    -   `ymin`: The bottom number.

    -   `ymax`: The top number.

A function in the `sf` package, `st_bbox()`, identifies how the boundary box will be drawn. Highlight the corresponding coordinates from the [OpenStreetMap](https://www.openstreetmap.org/) website and paste them as a list, specifying the coordinate, as in the example below:

```{r pull_area}
#| eval: false
# Get sensor information from a boundary box
boundary_data <- sf::st_bbox(c("xmin" = -84.5320, "ymin" = 39.0978,
                               "xmax" = -84.5003, "ymax" = 39.1181),
                             crs = 4326) |>
  get_sensors_data(fields = c("name", "last_seen",
                              "pm2.5_cf_1", "pm2.5_atm"))
boundary_data
```

```{r pull_area2}
#| echo: false
# Read in the result that should be obtained from the API
boundary_data <- readRDS(file="boundary_data.RDS")
boundary_data
```

The `crs=4326` option inside the `st_bbox()` indicates the coordinate system is a grid of latitude and longitude pairs. Once the boundary box has been defined, this information is then passed on to the `get_sensors_data()` function (using the `|>` operator) and then retrieves all the sensor data within that boundary box for the `fields` specified.

## Historical Sensor Data

The PurpleAir API dashboard collects and stores all the information reported from these PurpleAir sensors into the cloud. So far, we have been querying selected data from specified sensor data using the latest information that is available. It is also possible to pull historical data from these sensors to examine patterns or trends being recorded over time.

Let's return to the PurpleAir sensor at the Cincinnati Fire Department Station #12, whose `sensor_index` is 176557. It would be interesting to see air pollution readings over the 4th of July weekend, where people are celebrating Independence Day by setting off fireworks. The `get_sensor_history()` function in the `PurpleAir` package can return all the various observations that were recorded from a specified sensor between two time stamps. Since the PurpleAir sensors makes frequent measurements, it is wise to save this (very large) information as a data object called `sensor_history` so that multiple large API calls are made.

```{r pull_history}
#| eval: false
# Get historical data from a sensor from July 3-6, 2024
sensor_history <- get_sensor_history(sensor_index = 176557,
                                     fields = c("pm1.0_cf_1", "pm1.0_atm",
                                                "pm2.5_cf_1", "pm2.5_atm"),
                                     start_timestamp = as.POSIXct("2024-07-03"),
                                     end_timestamp = as.POSIXct("2024-07-06") )
sensor_history
```

```{r pull_history2}
#| echo: false
# Read in the result that should be obtained from the API
sensor_history <- readRDS(file="sensor_history.RDS")
sensor_history
```

The `sensor_index` is specified in the `get_sensor_history()` function that acknowledges the specific sensor, and the `fields` option returns the given information to be returned. The `start_timestamp` and `end_timestamp` options specify the start and end time stamps of historical data to be viewed. The function `as.POSIXct()` converts the special character string as a calendar date. The usual format for date character strings are the four-digit year, two-digit month, and two-digit date, separated by hyphens. All times begin at midnight UTC on the date specified by default, but it is also possible to include the hour, minute and second as well if only certain time periods are desired.

All the historical data from this sensor is stored as a data object called `sensor_history`. By typing in the name of this object and running it inside R, we can see the first several rows of the data object. This data can be used to do analysis and to create plots. For example, using the historical data from `sensor_history`, a time-series plot of PM~2.5~ can be created to see how PM~2.5~ values fluctuated over the course of the Fourth of July period at this location:

```{r sensor_plot}
#| fig-align: 'center'
#| fig-width: 8
# Get a time-series plot of sensor readings
sensor_history |>
  tidyr::pivot_longer(cols = tidyr::starts_with("pm"),
                      names_to = "pollutant", values_to = "concentration") |>
  ggplot2::ggplot(ggplot2::aes(time_stamp, concentration, color = pollutant)) +
  ggplot2::geom_line()
```

Here's a summary of what the above code does, in this order:

1.  The `pivot_longer()` function from the `tidyr` package reorganizes the `sensor_history` data to accommodate the plotting functions. The `cols` option takes all the columns that `start_with()` the characters `pm` (`pm1.0_cf_1`, `pm1.0_atm`, `pm2.5_atm`, and `pm2.5_cf_1`) and creates four groupings, the name of each group is the column name. A new column `pollutant` is created that identifies the pollutant group, which is one of the four provided. The value of that pollutant is given as another column `concentraton`. The reorganization is done so that each row identifies a concentration of one of the four PM pollutants.
2.  The `ggplot()` function from the `ggplot2` package takes the reorganized data from Step 1 and creates the time series plot. The `aes()` specifies what goes on the x-axis (`time_stamp` - the time the observation was made), the y-axis (`concentration` - the PM concentration observed) and how four lines are colored (`color=pollutant` indicates which pollutant the observed concentration belongs to).
3.  The `geom_line()` from the `ggplot2()` package takes the information specified in Step 2 and draws the time series plot as lines. Since there are four pollutants provided in the `pollutant` column (as indicated by the `color` option), there will be four lines drawn.

## Saving and Loading Data

Each time the PurpleAir API dashboard is requested, points are spent to download the data. For the duration of the R session, the data objects `sensor_data`, `multiple_data`, `boundary_data`, and `sensor_history` include information from the PurpleAir API dashboard. When you quit RStudio, any packages that are loaded become unloaded, any results that are not saved are erased, and all variables and data objects within the R environment get deleted. This becomes a problem, since restarting R will require the PurpleAir API dashboard to be called again to get back these data objects. Having to redownload data that you have already queried is not practical since this will use up a lot of points on your PurpleAir account.

A solution to this problem is to save each data object as a `.RDS` file. The `.RDS` (*R Data Serialization*) file format is just one of many popular data formats to save and read in data files. The function `saveRDS()` saves a data object into a `.RDS` file. The corresponding function `readRDS()` function reads a `.RDS` file into the R environment. The file path to the `.RDS` file can be specified in both functions, where at least the name of the `.RDS` file given to locate the correct file. By default, the `.RDS` files are saved in the same directory as the project folder.

The following code saves each of the `sensor_data`, `multiple_data`, `boundary_data` and `sensor_history` data objects into `.RDS` files with corresponding names:

```{r save_rds}
#| eval: false
# Save each data object for analysis later
saveRDS(sensor_data, file="sensor_data.RDS")
saveRDS(multiple_data, file="multiple_data.RDS")
saveRDS(boundary_data, file="boundary_data.RDS")
saveRDS(sensor_history, file="sensor_history.RDS")
```

::: callout-tip
Include a different file path aside from the current working directory if you wish to save these files in a different location on your computer. Just remember to use this same file path in the `readRDS()` function as the `saveRDS()` function.
:::

Check the working folder directory on your computer to find that four new `.RDS` files have been created inside the folder. The data that have been requested from the PurpleAir API dashboard are now safely saved onto your computer for later. At this point, it is save to quit out of RStudio and end the R session without losing the data files. When RStudio is opened and a new R session begins, the data objects can be reloaded back into the R environment by reading in the `.RDS` files. Use the `readRDS()` function to read back in the PurpleAir sensor data in a new R session:

```{r read_rds}
# Load each data object after a new R session
sensor_data <- readRDS(file="sensor_data.RDS")
multiple_data <- readRDS(file="multiple_data.RDS")
boundary_data <- readRDS(file="boundary_data.RDS")
sensor_history <- readRDS(file="sensor_history.RDS")
```

::: callout-tip
This method is very convenient whenever you need to quit out of RStudio and analyze the data later, since only the above code needs to be run to load the previous sensor data. This prevents having to call the PurpleAir API dashboard each time a new R session begins, saving precious points and time.
:::

::: callout-caution
Make sure that the file path specified in the `readRDS()` function is correctly specified. If the location of the `.RDS` file(s) changes, the file path must be updated to reflect the new location. Otherwise, R will be unable to locate the `.RDS` file(s).
:::

# Conclusions

The purpose of this vignette is to introduce how to communicate between R and the PurpleAir API dashboard to import data from the PurpleAir cloud servers into R and do basic data analysis. We have shown the basics of querying the data, from getting the latest information from PurpleAir sensors to obtaining historical data to analyzing several sensors over a specific region. It is also possible to retrieve information from other sources aside from PurpleAir such as [OpenAQ](https://openaq.org/). Once the data has been requested and downloaded into the R environment, a wide range of data analysis becomes possible, from exploring the data to identify things of interest to studying relationships and long-term trends in air pollution exposure. With the ability to introduce low-cost PurpleAir sensors to communities who are most affected by the result of ambient air pollution exposure, it is now possible to understand the science behind trends in certain areas. As the number of these low-costs sensors becomes available and grows with time, the data that will be collected for analysis will become large. We hope this vignette helps you understand how the data from these PurpleAir sensors are collected and used for analysis that will help promote change and awareness on the effects of ambient air pollution exposure in community neighborhoods.

# Acknowledgements {#sec-thanks}

Thanks to Dr. Cole Brokamp for creating the `PurpleAir` R package used in this vignette. Thank you to Erika Manning, Andrew Vancil, Qing Duan, and Carson Hartlage for proofreading the vignette and for offering suggestions to improve the vignette. Special thanks to Dr. Daniel Hargraves and Dr. Patrick Ryan for allowing me to speak at the RISE Communities Program at Cincinnati Children's Hospital Medical Center. Finally, huge thanks to PurpleAir Founder and CEO Adrian Dybwad for his guidance and input during the 2023 RISE Communities Program to improve the PurpleAir API dashboard and for his input in making retrieving PurpleAir sensor data in R now easier than ever.

If you have any comments or suggestions on ways that this tutorial can be improved, I'd love to hear from you! Please email me your feedback at [stephen.colegate\@cchmc.org](stephen.colegate@cchmc.org).

# References

::: {#refs}
:::
